//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebMVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SiemensBomEntities : DbContext
    {
        public SiemensBomEntities()
            : base("name=SiemensBomEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<T_Directory> T_Directory { get; set; }
        public virtual DbSet<T_MailTask> T_MailTask { get; set; }
        public virtual DbSet<T_MaterielSAP> T_MaterielSAP { get; set; }
        public virtual DbSet<T_ApprovalRecord> T_ApprovalRecord { get; set; }
        public virtual DbSet<T_CntrNo> T_CntrNo { get; set; }
        public virtual DbSet<T_CntrNoTypical> T_CntrNoTypical { get; set; }
        public virtual DbSet<T_CntrNoTypicalLog> T_CntrNoTypicalLog { get; set; }
        public virtual DbSet<T_DirectoryClass> T_DirectoryClass { get; set; }
        public virtual DbSet<T_DirectoryGroup> T_DirectoryGroup { get; set; }
        public virtual DbSet<T_DirectoryTemplate> T_DirectoryTemplate { get; set; }
        public virtual DbSet<T_File> T_File { get; set; }
        public virtual DbSet<T_MasterInfo> T_MasterInfo { get; set; }
        public virtual DbSet<T_MaterielChildren> T_MaterielChildren { get; set; }
        public virtual DbSet<T_MaterielDesign> T_MaterielDesign { get; set; }
        public virtual DbSet<T_Menu> T_Menu { get; set; }
        public virtual DbSet<T_Product> T_Product { get; set; }
        public virtual DbSet<T_ProductContract> T_ProductContract { get; set; }
        public virtual DbSet<T_ProductContractHeader> T_ProductContractHeader { get; set; }
        public virtual DbSet<T_ProductData> T_ProductData { get; set; }
        public virtual DbSet<T_ProductDataLog> T_ProductDataLog { get; set; }
        public virtual DbSet<T_ProductDataLogTemp> T_ProductDataLogTemp { get; set; }
        public virtual DbSet<T_ProductDataPlan> T_ProductDataPlan { get; set; }
        public virtual DbSet<T_ProductDataTemp> T_ProductDataTemp { get; set; }
        public virtual DbSet<T_ProductSeries> T_ProductSeries { get; set; }
        public virtual DbSet<T_ProjectContract> T_ProjectContract { get; set; }
        public virtual DbSet<T_ProjectContractHeader> T_ProjectContractHeader { get; set; }
        public virtual DbSet<T_Role> T_Role { get; set; }
        public virtual DbSet<T_RoleMenu> T_RoleMenu { get; set; }
        public virtual DbSet<T_Semifinished> T_Semifinished { get; set; }
        public virtual DbSet<T_SemifinishedData> T_SemifinishedData { get; set; }
        public virtual DbSet<T_Series> T_Series { get; set; }
        public virtual DbSet<T_System> T_System { get; set; }
        public virtual DbSet<T_SystemInfo> T_SystemInfo { get; set; }
        public virtual DbSet<T_Typical> T_Typical { get; set; }
        public virtual DbSet<T_TypicalData> T_TypicalData { get; set; }
        public virtual DbSet<T_User> T_User { get; set; }
        public virtual DbSet<T_UserDirectoryTemplate> T_UserDirectoryTemplate { get; set; }
        public virtual DbSet<T_UserRole> T_UserRole { get; set; }
        public virtual DbSet<T_VMaterielDesign> T_VMaterielDesign { get; set; }
    
        [DbFunction("SiemensBomEntities", "f_split")]
        public virtual IQueryable<f_split_Result> f_split(string c, string split)
        {
            var cParameter = c != null ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(string));
    
            var splitParameter = split != null ?
                new ObjectParameter("split", split) :
                new ObjectParameter("split", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_split_Result>("[SiemensBomEntities].[f_split](@c, @split)", cParameter, splitParameter);
        }
    
        public virtual ObjectResult<sp_GetTableColumns_Result> sp_GetTableColumns(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTableColumns_Result>("sp_GetTableColumns", tableNameParameter);
        }
    }
}
